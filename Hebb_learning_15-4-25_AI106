# @title b)implement a simple neural network using Hebb's learning rule for training
import numpy as np
class HebbianNetwork:
    def __init__(self, input_size):
        self.weights = np.zeros(input_size)
    def train(self, X, y):
        for xi, target in zip(X, y):
            self.weights += xi * target
    def predict(self, x):
        return np.dot(self.weights, x)
X = np.array([[1, 0], [0, 1], [1, 1]])
y = np.array([1, 1, 1])
hebb_net = HebbianNetwork(input_size=2)
hebb_net.train(X, y)
print("Trained weights:", hebb_net.weights)
for i in X:
    print(f"Input: {i}, Output: {hebb_net.predict(i)}")
