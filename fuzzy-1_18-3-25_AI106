# @title fuzzy min max
import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from textblob import TextBlob
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, classification_report

# Download required NLTK resources
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('punkt_tab') # download the missing 'punkt_tab' data package


# Function to preprocess text data
def preprocess(text):
    text = text.lower()
    words = word_tokenize(text)
    words = [word for word in words if word not in stopwords.words('english')]
    return ' '.join(words)

# Create a small sample dataset (replace with your data if available)
data = {'text': ['This is a great product!', 'I hate this service.', 'It was okay, nothing special.'],
        'sentiment': ['positive', 'negative', 'neutral']}
df = pd.DataFrame(data)

# Preprocess text data
df['processed_text'] = df['text'].apply(preprocess)

# Calculate polarity using TextBlob
df['textblob_polarity'] = df['processed_text'].apply(lambda text: TextBlob(text).sentiment.polarity)

# Define fuzzy logic system
polarity = ctrl.Antecedent(np.arange(-1, 1.1, 0.1), 'polarity')
sentiment = ctrl.Consequent(np.arange(0, 1.1, 0.1), 'sentiment')

polarity['negative'] = fuzz.trimf(polarity.universe, [-1, -1, 0])
polarity['neutral'] = fuzz.trimf(polarity.universe, [-0.5, 0, 0.5])
polarity['positive'] = fuzz.trimf(polarity.universe, [0, 1, 1])

sentiment['negative'] = fuzz.trimf(sentiment.universe, [0, 0, 0.3])
sentiment['neutral'] = fuzz.trimf(sentiment.universe, [0.2, 0.5, 0.7])
sentiment['positive'] = fuzz.trimf(sentiment.universe, [0.5, 1, 1])

rule1 = ctrl.Rule(polarity['positive'], sentiment['positive'])
rule2 = ctrl.Rule(polarity['negative'], sentiment['negative'])
rule3 = ctrl.Rule(polarity['neutral'], sentiment['neutral'])

sentiment_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
sentiment_sim = ctrl.ControlSystemSimulation(sentiment_ctrl)

# Calculate fuzzy sentiments
fuzzy_sentiments = []
for polarity_score in df['textblob_polarity']:
    sentiment_sim.input['polarity'] = polarity_score
    try:
        sentiment_sim.compute()
        fuzzy_sentiments.append(sentiment_sim.output['sentiment'])
    except:
        fuzzy_sentiments.append(np.nan)

df['fuzzy_sentiment_score'] = fuzzy_sentiments

# Handle NaN values
df['fuzzy_sentiment_score'].fillna(0.5, inplace=True)

# Map sentiment scores to categories
def map_sentiment(score):
    if score <= 0.4:
        return 'negative'
    elif score >= 0.6:
        return 'positive'
    else:
        return 'neutral'

df['fuzzy_sentiment'] = df['fuzzy_sentiment_score'].apply(map_sentiment)

# Generate classification report
report = classification_report(df['sentiment'], df['fuzzy_sentiment'], target_names=['negative', 'neutral', 'positive'])
print(report)

# Visualize fuzzy sets (optional)
# polarity.view()
# sentiment.view()
